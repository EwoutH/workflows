name: Test

on:
  workflow_call:
    inputs:
      python-version:
        required: false
        type: string
        default: "3.x"
      os:
        required: false
        type: string
        default: ubuntu-latest
      extras:
        required: false
        type: string
        default: test
      pip-install-flags:
        required: false
        type: string
        default: ""
        description: "Flags to pass to pip install. Can be used for --editable, --no-deps, etc."
      pip-pre:
        required: false
        type: boolean
        default: false
        description: "Whether to install pre-releases in the pip install phase."
        # example >>> pip-pre: github.event_name == 'schedule'
      pip-pre-installs:
        required: false
        type: string
        default: ""
        description: "Packages to install before `pip install .[extras]`"
      pip-post-installs:
        required: false
        type: string
        default: ""
        description: "Packages to install after `pip install .[extras]`"
      qt:
        required: false
        type: string
        default: ""
        description: "Version of Qt to install."
      fetch-depth:
        required: false
        type: number
        default: 1
        description: "The number of commits to fetch. 0 indicates all history for all branches and tags."
      python-cache-dependency-path:
        required: false
        type: string
        default: "pyproject.toml"
      pytest-args:
        required: false
        type: string
        default: ""
        description: "Arguments to pass to pytest. Can be used for -k, -m, -x, etc."
      pytest-cov-flags:
        required: false
        type: string
        default: "--cov --cov-report=xml --cov-report=term-missing"
        description: "Flags to pass to pytest-cov. Can be used for --cov-fail-under, --cov-branch, etc."
      fail-on-coverage-error:
        required: false
        type: boolean
        default: true
        description: "Fail the build if coverage fails."
      hatch-build-hooks-enable:
        required: false
        type: boolean
        default: false
        description: "Enable build hooks for Hatch."
      report-failures:
        required: false
        type: boolean
        default: false
        description: "Whether to create a GitHub issue when a test fails. Good for cron jobs."
        # example >>> report-failures: github.event_name == 'schedule'

jobs:
  test:
    name: ${{ inputs.os }} py${{ inputs.python-version }} ${{ inputs.qt }}
    runs-on: ${{ inputs.os }}
    env:
      HATCH_BUILD_HOOKS_ENABLE: ${{ inputs.hatch-build-hooks-enable }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ inputs.fetch-depth }}

      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
          cache-dependency-path: ${{ inputs.python-cache-dependency-path }}
          cache: "pip"

      - name: Setup Qt Libraries
        if: ${{ inputs.qt != '' }}
        uses: tlambert03/setup-qt-libs@v1

      - name: Pip pre-install
        if: ${{ inputs.pip-pre-installs != '' }}
        run: python -m pip install ${{ inputs.pip-pre-installs }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install ${{ inputs.pip-install-flags }} .[${{ inputs.extras }}]
        env:
          # common usage might be:
          #   pip-pre: github.event_name == 'schedule'
          PIP_PRE: ${{ inputs.pip-pre }}

      - name: Install Qt (${{ inputs.qt }})
        if: ${{ inputs.qt != '' }}
        run: python -m pip install ${{ inputs.qt }}

      - name: Pip post-install
        if: ${{ inputs.pip-post-installs != '' }}
        run: python -m pip install ${{ inputs.pip-post-installs }} --force-reinstall

      - name: Run tests
        if: ${{ inputs.qt == '' }}
        run: python -m pytest --color=yes ${{ inputs.pytest-cov-flags }} ${{ inputs.pytest-args }}

      - name: Run (headless) tests
        if: ${{ inputs.qt != '' }}
        uses: aganders3/headless-gui@v1
        with:
          run: python -m pytest --color=yes ${{ inputs.pytest-cov-flags }} ${{ inputs.pytest-args }}

      - name: Report failure
        # common usage might be: report-failures: github.event_name == 'schedule'
        if: ${{ failure() && inputs.report-failures }}
        uses: actions/github-script@v6
        env:
          ACTION_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/job/${{ github.job }}
          WORKFLOW_NAME: ${{ github.workflow }}
        with:
          script: |
            const { ACTION_URL, WORKFLOW_NAME } = process.env

            const issueTitle = `Tests failing in ${WORKFLOW_NAME}`;
            const labels = ['reusable-test-failure'];

            // Search for existing open issues with the same title and label
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: labels.join(','),
              state: 'open'
            });

            // If there is an open issue with the title, do not create a new one
            const hasOpenIssue = existingIssues.data.some(issue => issue.title === issueTitle);
            if (!hasOpenIssue) {
              const issueBody = `A test failed. Please review the [workflow logs](${ACTION_URL}) for details.`;

              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: labels
              });
            }

      - name: Coverage
        if: ${{ inputs.pytest-cov-flags != '' }}
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: ${{ inputs.fail-on-coverage-error }}
          verbose: true
